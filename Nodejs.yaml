AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  Nodejs4MysqlInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: nodjs-mysql-instance-profile
      Path: /
      Roles:
        - !Ref Ec2MysqlInstanceRole

  Ec2MysqlInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ec2-mysql-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  NodejsInstanceRdsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref Ec2MysqlInstanceRole
      PolicyName: Ec2RdsPolicy

      PolicyDocument:
        Version: 2012-10-17
        Statement:
          [
            {
              "Effect": "Allow",
              "Action":
                [
                  "rds:*",
                  "application-autoscaling:DeleteScalingPolicy",
                  "application-autoscaling:DeregisterScalableTarget",
                  "application-autoscaling:DescribeScalableTargets",
                  "application-autoscaling:DescribeScalingActivities",
                  "application-autoscaling:DescribeScalingPolicies",
                  "application-autoscaling:PutScalingPolicy",
                  "application-autoscaling:RegisterScalableTarget",
                  "cloudwatch:DescribeAlarms",
                  "cloudwatch:GetMetricStatistics",
                  "cloudwatch:PutMetricAlarm",
                  "cloudwatch:DeleteAlarms",
                  "cloudwatch:ListMetrics",
                  "cloudwatch:GetMetricData",
                  "ec2:DescribeAccountAttributes",
                  "ec2:DescribeAvailabilityZones",
                  "ec2:DescribeCoipPools",
                  "ec2:DescribeInternetGateways",
                  "ec2:DescribeLocalGatewayRouteTablePermissions",
                  "ec2:DescribeLocalGatewayRouteTables",
                  "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
                  "ec2:DescribeLocalGateways",
                  "ec2:DescribeSecurityGroups",
                  "ec2:DescribeSubnets",
                  "ec2:DescribeVpcAttribute",
                  "ec2:DescribeVpcs",
                  "ec2:GetCoipPoolUsage",
                  "sns:ListSubscriptions",
                  "sns:ListTopics",
                  "sns:Publish",
                  "logs:DescribeLogStreams",
                  "logs:GetLogEvents",
                  "outposts:GetOutpostInstanceTypes",
                  "devops-guru:GetResourceCollection",
                ],
              "Resource": "*",
            },
            {
              "Effect": "Allow",
              "Action": "pi:*",
              "Resource": "arn:aws:pi:*:*:metrics/rds/*",
            },
            {
              "Effect": "Allow",
              "Action": "iam:CreateServiceLinkedRole",
              "Resource": "*",
              "Condition":
                {
                  "StringLike":
                    {
                      "iam:AWSServiceName":
                        [
                          "rds.amazonaws.com",
                          "rds.application-autoscaling.amazonaws.com",
                        ],
                    },
                },
            },
            {
              "Action":
                [
                  "devops-guru:SearchInsights",
                  "devops-guru:ListAnomaliesForInsight",
                ],
              "Effect": "Allow",
              "Resource": "*",
              "Condition":
                {
                  "ForAllValues:StringEquals":
                    { "devops-guru:ServiceNames": ["RDS"] },
                  "Null": { "devops-guru:ServiceNames": "false" },
                },
            },
          ]

  NodejsInstanceS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Ec2MyqlS3Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - arn:aws:s3:::ltm893-mysql-bike-loads/*
              - arn:aws:s3:::ltm893-mysql-bike-loads
      Roles:
        - !Ref Ec2MysqlInstanceRole

  NodejsInstanceSsmPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Ec2MysqlSsmPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          [
            {
              "Effect": "Allow",
              "Action":
                [
                  "ssm:DescribeAssociation",
                  "ssm:GetDeployablePatchSnapshotForInstance",
                  "ssm:GetDocument",
                  "ssm:DescribeDocument",
                  "ssm:GetManifest",
                  "ssm:GetParameter",
                  "ssm:GetParameters",
                  "ssm:ListAssociations",
                  "ssm:ListInstanceAssociations",
                  "ssm:PutInventory",
                  "ssm:PutComplianceItems",
                  "ssm:PutConfigurePackageResult",
                  "ssm:UpdateAssociationStatus",
                  "ssm:UpdateInstanceAssociationStatus",
                  "ssm:UpdateInstanceInformation",
                ],
              "Resource": "*",
            },
            {
              "Effect": "Allow",
              "Action":
                [
                  "ssmmessages:CreateControlChannel",
                  "ssmmessages:CreateDataChannel",
                  "ssmmessages:OpenControlChannel",
                  "ssmmessages:OpenDataChannel",
                ],
              "Resource": "*",
            },
            {
              "Effect": "Allow",
              "Action":
                [
                  "ec2messages:AcknowledgeMessage",
                  "ec2messages:DeleteMessage",
                  "ec2messages:FailMessage",
                  "ec2messages:GetEndpoint",
                  "ec2messages:GetMessages",
                  "ec2messages:SendReply",
                ],
              "Resource": "*",
            },
          ]
      Roles:
        - !Ref Ec2MysqlInstanceRole

  EC2Nodejs:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Bring up app server
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              jq: []
              telnet: []
              mariadb: []
          files:
            "/home/ec2-user/scripts/nodejsenvs":
              content: |
                #!/bin/bash
                set -eo pipefail
                echo 'export NVM_DIR="/home/ec2-user/.nvm"' >> /home/ec2-user/.bashrc
                echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" ' >> /home/ec2-user/.bashrc
                echo 'TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` '  >> /home/ec2-user/.bashrc
                echo 'PRIVIP=`curl -s -o /dev/null -H "X-aws-ec2-metadata-token: $TOKEN"  http://169.254.169.254/latest/meta-data/local-ipv4` > /dev/null'  >> /home/ec2-user/.bashrc
                echo 'export PRIVIP=$PRIVIP' >> /home/ec2-user/.bashrc 
              mode: "000755"
              owner: ec2-user
              group: ec2-user

            "/home/ec2-user/scripts/installnode":
              content: |
                #!/bin/bash
                set -eo pipefail
                id > /home/ec2-user/cf-id
                /home/ec2-user/scripts/nodejsenvs
                source ~/.bashrc
                source ~/.nvm/nvm.sh
                nvm install 16
              mode: "000755"
              owner: ec2-user

              group: ec2-user

            "/home/ec2-user/app/bikeapp/server.js":
              content: |
                const express = require('express')
                const bodyParser = require('body-parser')

                const app = express()
                const port = 8080

                app.use(bodyParser.json())

                app.get('/', (req, res) => {
                    res.send('This is How we Move!')
                })

                app.get('/health', (req, res) => {
                    res.header({ "System-Health": true })
                    res.sendStatus(204)
                })

                const fibonacci = n => {
                    if (n <= 1) {
                        return n
                    }
                    return fibonacci(n - 1) + fibonacci(n - 2)
                }

                app.post('/fibonacci', (req, res) => {
                    const fibIndex = req.body.index
                    res.status(202).json({ index: fibIndex, result: "calculating..." })

                    console.log("Fibonacci number:", fibonacci(fibIndex))
                })

                app.listen(port, () => {
                    console.log(`App listening on port ${port}`)
                })       
              mode: "000755"
              owner: ec2-user
              group: ec2-user

            "/home/ec2-user/app/setupnpm":
              content: |
                #!/bin/bash
                set -eo pipefail
                cd /home/ec2-user/app/bikeapp
                pwd > /home/ec2-user/cf-bikeapp
                npm init -y 
                npm install body-parser
                npm install express
              mode: "000755"
              owner: ec2-user
              group: ec2-user

            "/etc/systemd/system/simpleApp.service":
              content: |
                [Unit]
                Description=Simple Nodejs Express server
                After=network.target

                [Service]
                Type=simple   
                ExecStart=/home/ec2-user/.nvm/versions/node/v16.20.2/bin/node /home/ec2-user/app/bikeapp/server.js

                User=ec2-user
                Environment=ENV=production

                Restart=always
                RestartSec=1

                [Install]
                WantedBy=multi-user.target
              mode: "000755"
              owner: ec2-user
              group: ec2-user
            

          commands:
            01_get_nodejs:
              command: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
              # test: !Sub "test ! -e /inupt/${BikeDataBucketFile} "
            02_mv_nvm:
              command: "mv /.nvm /home/ec2-user && chown -R ec2-user:ec2-user /home/ec2-user"
            03_install_node:
              command: '/bin/su -c "/home/ec2-user/scripts/installnode" - ec2-user'
            04_npm_init:
              command: '/bin/su -c  "/home/ec2-user/app/setupnpm" - ec2-user'
            05_start_app:
              command: '/bin/su -c "sudo systemctl start simpleApp" - ec2-user'
            
    Properties:
      InstanceType: t2.micro
      KeyName: Ec2NodeKeyPair
      IamInstanceProfile: !Ref Nodejs4MysqlInstanceProfile
      ImageId: !Ref ImageId
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet:
            - !Ref InstanceSecurityGroup
          SubnetId: !ImportValue RdsSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Get the latest CloudFormation helper scripts
          yum install -y aws-cfn-bootstrap

          # Start cfn-init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Nodejs --region ${AWS::Region}

          # cfn-init completed so signal success or not
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Nodejs --region ${AWS::Region}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    #DependsOn: DBEC2SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !ImportValue TwoPubPrivVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.192.0.0/16

  Ec2NodeKeyPair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: Ec2NodeKeyPair



Outputs: 
  Nodejs4MysqlInstanceProfile:
    Description: Profile for EC2 Node Instances 
    Value: !Ref  Nodejs4MysqlInstanceProfile
    Export:
      Name:   Nodejs4MysqlInstanceProfileExport

  EC2SecurityGroup:
    Description: Security for Inbound Node Traffic
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: Ec2IntanceSecurityGroupExport

  EC2NodejsOutPut:
    Description: Used by API Gateway
    Value: !GetAtt EC2Nodejs.PrivateDnsName
    Export:
        Name: Ec2InstancePrivateDnsExport

  Ec2NodeKeyPairOutput:
    Description: Ec2KeyPair
    Value: Ec2NodeKeyPair
    Export:
        Name: Ec2NodeKeyPairExport

  Ec2NodeArnOutput:
    Description: Ec2KeyPair
    Value: !Ref EC2Nodejs
    Export:
        Name: Ec2NodeArnExport
      
